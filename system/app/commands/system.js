import e from"os";import o from"moment-timezone";import t from"fs";import s from"path";function r(e){let o=0;const n=t.readdirSync(e);for(const m of n){const n=s.join(e,m),a=t.statSync(n);a.isFile()?o+=a.size:a.isDirectory()&&(o+=r(n))}return o/1024/1024}export const setup={name:"system",version:"40.0.0",permission:"Administrator",description:"Process Manager",category:"Utility",usages:"",cooldown:0};let bb = r("../data").toFixed(2);export const execCommand=async function({api:t,event:s,timeZone:n,umaru:m}){let a=`《  UmaruV4  》\n\nCommands: ${m.client.allCommandsName.length}\nEvents: ${m.client.umaruEvents.length}\nUsers: ${m.allUserID.length}\nThreads: ${m.allThreadID.length+m.allInactiveThreadID.length}\nOS: ${e.platform()} ${e.machine()}\nHost: ${e.userInfo().username}@${e.hostname()}\nKernel: ${e.release()}\nPlatform: ${process.env.REPL_OWNER?"replit":process.env.CSB_SANDBOX_ID?"codesandbox":e.platform()} \nNodeJS Memory: ${(process.memoryUsage().rss/1024/1024).toFixed(2)}MB\nDate: ${o.tz(n).format("LLL")}\nDatabase Storage: ${bb} MB\nUptime: Hours: ${Math.floor(process.uptime()/60/60) % 24} Minutes: ${Math.floor(process.uptime()/60) % 60} Seconds: ${Math.floor(process.uptime() % 60)}\nPing: ${Date.now() - parseInt(s.timestamp)} ms`;return t.sendMessage(a,s.threadID,s.messageID)};